<?php

/**
 * BaseMedia
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $block_id
 * @property varchar $filename
 * @property varchar $filepath
 * @property varchar $mimetype
 * @property integer $filesize
 * @property clob $metadata
 * @property integer $dtype
 * @property timestamp $date
 * @property boolean $visible
 * @property integer $s_order
 * @property Block $Block
 * 
 * @method integer   getId()       Returns the current record's "id" value
 * @method integer   getBlockId()  Returns the current record's "block_id" value
 * @method varchar   getFilename() Returns the current record's "filename" value
 * @method varchar   getFilepath() Returns the current record's "filepath" value
 * @method varchar   getMimetype() Returns the current record's "mimetype" value
 * @method integer   getFilesize() Returns the current record's "filesize" value
 * @method clob      getMetadata() Returns the current record's "metadata" value
 * @method integer   getDtype()    Returns the current record's "dtype" value
 * @method timestamp getDate()     Returns the current record's "date" value
 * @method boolean   getVisible()  Returns the current record's "visible" value
 * @method integer   getSOrder()   Returns the current record's "s_order" value
 * @method Block     getBlock()    Returns the current record's "Block" value
 * @method Media     setId()       Sets the current record's "id" value
 * @method Media     setBlockId()  Sets the current record's "block_id" value
 * @method Media     setFilename() Sets the current record's "filename" value
 * @method Media     setFilepath() Sets the current record's "filepath" value
 * @method Media     setMimetype() Sets the current record's "mimetype" value
 * @method Media     setFilesize() Sets the current record's "filesize" value
 * @method Media     setMetadata() Sets the current record's "metadata" value
 * @method Media     setDtype()    Sets the current record's "dtype" value
 * @method Media     setDate()     Sets the current record's "date" value
 * @method Media     setVisible()  Sets the current record's "visible" value
 * @method Media     setSOrder()   Sets the current record's "s_order" value
 * @method Media     setBlock()    Sets the current record's "Block" value
 * 
 * @package    sft.loc
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMedia extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('media');
        $this->hasColumn('id', 'integer', 5, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 5,
             ));
        $this->hasColumn('block_id', 'integer', 5, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => 5,
             ));
        $this->hasColumn('filename', 'varchar', 255, array(
             'type' => 'varchar',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('filepath', 'varchar', null, array(
             'type' => 'varchar',
             'notnull' => true,
             ));
        $this->hasColumn('mimetype', 'varchar', 32, array(
             'type' => 'varchar',
             'length' => 32,
             ));
        $this->hasColumn('filesize', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('metadata', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('dtype', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             ));
        $this->hasColumn('date', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('visible', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('s_order', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));

        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Block', array(
             'local' => 'block_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}